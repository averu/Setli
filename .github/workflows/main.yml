name: 'publish'
on:
  push:
    branches:
      - release
jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]
    runs-on: ${{ matrix.platform }}
    env:
      TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
      TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
      - uses: pnpm/action-setup@v2.2.4
        with:
          version: 7.28.0
      - name: setup node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
      - name: install frontend dependencies
        run: pnpm install # change this to npm or pnpm depending on which one you use
      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: setli-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version
          releaseName: 'setli v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
      - name: Get version from package.json (Windows)
        if: runner.os == 'Windows'
        run: |
          echo "APP_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV
        shell: bash
      - name: Update gist with Windows (x86_64) signature and url
        if: matrix.platform == 'windows-latest'
        shell: bash
        run: |
          ls ./src-tauri/target/release/bundle/msi/
          CONTENT=$(cat "./src-tauri/target/release/bundle/msi/setli_${{ env.APP_VERSION }}_x64_en-US.msi.zip.sig")
          URL="https://github.com/averu/setli/releases/download/setli_${{ env.APP_VERSION }}/setli_${{ env.APP_VERSION }}_x64_en-US.msi.zip"
          echo "${{ secrets.UPDATE_GIST_ID }}"
          GIST_CONTENT=$(gh gist view "${{ secrets.UPDATE_GIST_ID }}" --raw | tail -n +3)
          echo $GIST_CONTENT > temp.json
          jq --arg CONTENT "$CONTENT" --arg URL "$URL" \
          '.platforms.windows_x86_64.signature = $CONTENT | .platforms.windows_x86_64.url = $URL' temp.json > updated.json
          gh gist edit "${{ secrets.UPDATE_GIST_ID }}" updated.json
        env:
          GH_TOKEN: ${{ secrets.GH_GIST_TOKEN }}
